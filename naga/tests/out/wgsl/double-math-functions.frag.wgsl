fn main_1() {
    var a: vec4<f64> = vec4(1.0lf);
    var b: vec4<f64> = vec4(2.0lf);
    var m: mat4x4<f64>;
    var i: i32 = 5i;
    var ceilOut: vec4<f64>;
    var roundOut: vec4<f64>;
    var floorOut: vec4<f64>;
    var fractOut: vec4<f64>;
    var truncOut: vec4<f64>;
    var absOut: vec4<f64>;
    var sqrtOut: vec4<f64>;
    var inversesqrtOut: vec4<f64>;
    var signOut: vec4<f64>;
    var transposeOut: mat4x4<f64>;
    var normalizeOut: vec4<f64>;
    var lengthOut: f64;
    var determinantOut: f64;
    var modOut: f64;
    var dotOut: f64;
    var maxOut: vec4<f64>;
    var minOut: vec4<f64>;
    var reflectOut: vec4<f64>;
    var crossOut: vec3<f64>;
    var distanceOut: f64;
    var stepOut: vec4<f64>;
    var ldexpOut: f64;
    var smoothStepScalar: f64;
    var smoothStepVector: vec4<f64>;
    var smoothStepMixed: vec4<f64>;

    let _e8 = a;
    let _e9 = b;
    let _e10 = a;
    let _e11 = b;
    m = mat4x4<f64>(vec4<f64>(_e8.x, _e8.y, _e8.z, _e8.w), vec4<f64>(_e9.x, _e9.y, _e9.z, _e9.w), vec4<f64>(_e10.x, _e10.y, _e10.z, _e10.w), vec4<f64>(_e11.x, _e11.y, _e11.z, _e11.w));
    let _e36 = a;
    ceilOut = ceil(_e36);
    let _e39 = a;
    roundOut = round(_e39);
    let _e42 = a;
    floorOut = floor(_e42);
    let _e45 = a;
    fractOut = fract(_e45);
    let _e48 = a;
    truncOut = trunc(_e48);
    let _e51 = a;
    absOut = abs(_e51);
    let _e54 = a;
    sqrtOut = sqrt(_e54);
    let _e57 = a;
    inversesqrtOut = inverseSqrt(_e57);
    let _e60 = a;
    signOut = sign(_e60);
    let _e63 = m;
    transposeOut = transpose(_e63);
    let _e66 = a;
    normalizeOut = normalize(_e66);
    let _e69 = a;
    lengthOut = length(_e69);
    let _e72 = m;
    determinantOut = determinant(_e72);
    let _e75 = a;
    let _e77 = b;
    modOut = (_e75.x - (floor((_e75.x / _e77.x)) * _e77.x));
    let _e84 = a;
    let _e85 = b;
    dotOut = dot(_e84, _e85);
    let _e88 = a;
    let _e89 = b;
    maxOut = max(_e88, _e89);
    let _e92 = a;
    let _e93 = b;
    minOut = min(_e92, _e93);
    let _e96 = a;
    let _e97 = b;
    reflectOut = reflect(_e96, _e97);
    let _e100 = a;
    let _e102 = b;
    crossOut = cross(_e100.xyz, _e102.xyz);
    let _e106 = a;
    let _e107 = b;
    distanceOut = distance(_e106, _e107);
    let _e110 = a;
    let _e111 = b;
    stepOut = step(_e110, _e111);
    let _e114 = a;
    let _e116 = i;
    ldexpOut = ldexp(_e114.x, _e116);
    smoothStepScalar = f64(smoothstep(0f, 1f, 0.5f));
    smoothStepVector = smoothstep(vec4(0.0lf), vec4(1.0lf), vec4(0.5lf));
    smoothStepMixed = smoothstep(vec4(0.0lf), vec4(1.0lf), vec4(0.5lf));
    return;
}

@fragment 
fn main() {
    main_1();
    return;
}
