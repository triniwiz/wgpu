fn main_1() {
    var a: vec4<f32> = vec4(1f);
    var b: vec4<f32> = vec4(2f);
    var m: mat4x4<f32>;
    var i: i32 = 5i;
    var ceilOut: vec4<f32>;
    var roundOut: vec4<f32>;
    var floorOut: vec4<f32>;
    var fractOut: vec4<f32>;
    var truncOut: vec4<f32>;
    var sinOut: vec4<f32>;
    var absOut: vec4<f32>;
    var sqrtOut: vec4<f32>;
    var inversesqrtOut: vec4<f32>;
    var expOut: vec4<f32>;
    var exp2Out: vec4<f32>;
    var signOut: vec4<f32>;
    var transposeOut: mat4x4<f32>;
    var normalizeOut: vec4<f32>;
    var sinhOut: vec4<f32>;
    var cosOut: vec4<f32>;
    var coshOut: vec4<f32>;
    var tanOut: vec4<f32>;
    var tanhOut: vec4<f32>;
    var acosOut: vec4<f32>;
    var asinOut: vec4<f32>;
    var logOut: vec4<f32>;
    var log2Out: vec4<f32>;
    var lengthOut: f32;
    var determinantOut: f32;
    var bitCountOut: i32;
    var bitfieldReverseOut: i32;
    var atanOut: f32;
    var atan2Out: f32;
    var modOut: f32;
    var powOut: vec4<f32>;
    var dotOut: f32;
    var maxOut: vec4<f32>;
    var minOut: vec4<f32>;
    var reflectOut: vec4<f32>;
    var crossOut: vec3<f32>;
    var distanceOut: f32;
    var stepOut: vec4<f32>;
    var ldexpOut: f32;
    var rad: vec4<f32>;
    var deg: f32;
    var smoothStepScalar: f32;
    var smoothStepVector: vec4<f32>;
    var smoothStepMixed: vec4<f32>;

    let _e6 = a;
    let _e7 = b;
    let _e8 = a;
    let _e9 = b;
    m = mat4x4<f32>(vec4<f32>(_e6.x, _e6.y, _e6.z, _e6.w), vec4<f32>(_e7.x, _e7.y, _e7.z, _e7.w), vec4<f32>(_e8.x, _e8.y, _e8.z, _e8.w), vec4<f32>(_e9.x, _e9.y, _e9.z, _e9.w));
    let _e34 = a;
    ceilOut = ceil(_e34);
    let _e37 = a;
    roundOut = round(_e37);
    let _e40 = a;
    floorOut = floor(_e40);
    let _e43 = a;
    fractOut = fract(_e43);
    let _e46 = a;
    truncOut = trunc(_e46);
    let _e49 = a;
    sinOut = sin(_e49);
    let _e52 = a;
    absOut = abs(_e52);
    let _e55 = a;
    sqrtOut = sqrt(_e55);
    let _e58 = a;
    inversesqrtOut = inverseSqrt(_e58);
    let _e61 = a;
    expOut = exp(_e61);
    let _e64 = a;
    exp2Out = exp2(_e64);
    let _e67 = a;
    signOut = sign(_e67);
    let _e70 = m;
    transposeOut = transpose(_e70);
    let _e73 = a;
    normalizeOut = normalize(_e73);
    let _e76 = a;
    sinhOut = sinh(_e76);
    let _e79 = a;
    cosOut = cos(_e79);
    let _e82 = a;
    coshOut = cosh(_e82);
    let _e85 = a;
    tanOut = tan(_e85);
    let _e88 = a;
    tanhOut = tanh(_e88);
    let _e91 = a;
    acosOut = acos(_e91);
    let _e94 = a;
    asinOut = asin(_e94);
    let _e97 = a;
    logOut = log(_e97);
    let _e100 = a;
    log2Out = log2(_e100);
    let _e103 = a;
    lengthOut = length(_e103);
    let _e106 = m;
    determinantOut = determinant(_e106);
    let _e109 = i;
    bitCountOut = countOneBits(_e109);
    let _e112 = i;
    bitfieldReverseOut = reverseBits(_e112);
    let _e115 = a;
    atanOut = atan(_e115.x);
    let _e119 = a;
    let _e121 = a;
    atan2Out = atan2(_e119.x, _e121.y);
    let _e125 = a;
    let _e127 = b;
    modOut = (_e125.x - (floor((_e125.x / _e127.x)) * _e127.x));
    let _e134 = a;
    let _e135 = b;
    powOut = pow(_e134, _e135);
    let _e138 = a;
    let _e139 = b;
    dotOut = dot(_e138, _e139);
    let _e142 = a;
    let _e143 = b;
    maxOut = max(_e142, _e143);
    let _e146 = a;
    let _e147 = b;
    minOut = min(_e146, _e147);
    let _e150 = a;
    let _e151 = b;
    reflectOut = reflect(_e150, _e151);
    let _e154 = a;
    let _e156 = b;
    crossOut = cross(_e154.xyz, _e156.xyz);
    let _e160 = a;
    let _e161 = b;
    distanceOut = distance(_e160, _e161);
    let _e164 = a;
    let _e165 = b;
    stepOut = step(_e164, _e165);
    let _e168 = a;
    let _e170 = i;
    ldexpOut = ldexp(_e168.x, _e170);
    let _e173 = a;
    rad = radians(_e173);
    let _e176 = a;
    deg = degrees(_e176.x);
    smoothStepScalar = smoothstep(0f, 1f, 0.5f);
    smoothStepVector = smoothstep(vec4(0f), vec4(1f), vec4(0.5f));
    smoothStepMixed = smoothstep(vec4(0f), vec4(1f), vec4(0.5f));
    return;
}

@fragment 
fn main() {
    main_1();
    return;
}
